#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : enable

#include "ray_payload.glsl"

layout(binding = 0, set = 0, rgba32f) uniform image2D image;

layout(binding = 0, set = 1) uniform accelerationStructureEXT topLevelAS;

layout(binding = 0, set = 2) uniform camera {
    mat4 view;
    mat4 view_inv;
    mat4 proj;
    mat4 proj_inv;
};

layout(location = 0) rayPayloadEXT HitPayload prd;

void main() {
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = pixel_center/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;

    vec4 origin    = view_inv * vec4(0, 0, 0, 1);
    vec4 target    = proj_inv * vec4(d.x, d.y, 1, 1);
    vec4 direction = view_inv * vec4(normalize(target.xyz), 0);

    uint  ray_flags = gl_RayFlagsOpaqueEXT;
    float t_min     = 0.001;
    float t_max     = 10000.0;

    traceRayEXT(topLevelAS, // acceleration structure
              ray_flags,       // rayFlags
              0xFF,           // cullMask
              0,              // sbtRecordOffset
              0,              // sbtRecordStride
              0,              // missIndex
              origin.xyz,     // ray origin
              t_min,           // ray min range
              direction.xyz,  // ray direction
              t_max,           // ray max range
              0               // payload (location = 0)
    );
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hit_value, 1.0));
}